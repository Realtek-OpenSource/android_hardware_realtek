# ----------------------------------------------------------------------
#
# This makefile has been automatically generated by WinGDB 2.2, build 1191
# Do not edit.
#
# Project: vpurun
#
# ----------------------------------------------------------------------

PLATFORM_LIB_SRC_PATH=../../../../..
GENERIC_LINUX_PATH=$(PLATFORM_LIB_SRC_PATH)/genericLinux
include $(GENERIC_LINUX_PATH)/MakeConfig

export ARCH=arm
export CROSS_TARGET = $(TOOLCHAIN_PATH)/$(RTK_GL_TOOLCHAIN_NAME)-
export CROSS_COMPILE = $(TOOLCHAIN_PATH)/$(RTK_GL_TOOLCHAIN_NAME)-
export CC=$(CROSS_COMPILE)gcc
export AR=$(CROSS_COMPILE)ar
export CXX=${CROSS_COMPILE}g++
export AS=${CROSS_COMPILE}as
export LD=${CROSS_COMPILE}ld
export RANLIB=${CROSS_COMPILE}ranlib
export READELF=${CROSS_COMPILE}readelf
export STRIP=${CROSS_COMPILE}strip

WITH_FFMPEG = false

ifeq ($(WITH_FFMPEG),true)
CFLAGS = -O3 -Wall -I. -I./theoraparser/include -I./vpuapi -I./include -I./ffmpeg/include -I../Firmware
CFLAGS += -DWITH_FFMPEG
LDFLAGS = -L. -L./ffmpeg/lib -L./theoraparser -lavformat -lavcodec -lavutil -lpthread -ltheoraparser -lm
else
CFLAGS = -O3 -Wall -I. -I./theoraparser/include -I./vpuapi -I./include -I../Firmware
LDFLAGS = -L. -lpthread -lm 
endif
CFLAGS += -DCONFIG_RTK_RPC
CFLAGS += -I$(PLATFORM_LIB_SRC_PATH)/system/core/include -I$(PLATFORM_LIB_SRC_PATH)/bionic/libc/kernel/common
CFLAGS += -I$(PLATFORM_LIB_SRC_PATH)/device/realtek/proprietary/libs/Include
CFLAGS += -I$(PLATFORM_LIB_SRC_PATH)/device/realtek/proprietary/libs/rtk_libs/common
CFLAGS += -I$(PLATFORM_LIB_SRC_PATH)/device/realtek/proprietary/libs/rtk_libs/common/IPC/generate/include/system
CFLAGS += -I$(PLATFORM_LIB_SRC_PATH)/device/realtek/proprietary/libs/rtk_libs/common/IPC/include
CFLAGS += -I$(PLATFORM_LIB_SRC_PATH)/device/realtek/proprietary/libs/rtk_libs/common/IPC/include/xdr
CFLAGS += -I$(PLATFORM_LIB_SRC_PATH)/device/realtek/proprietary/libs/rtk_libs/common/IPC/src/xdr
#LDFLAGS += -lRTK_lib

ARFLAGS = cru
LDFLAGS += -static 
#LDFLAGS += -lvpu
RESULT=vpurun
INTERMEDIATE_DIR=obj
DESTINATION_DIR=$(GENERIC_LINUX_PATH)/lib

RM=rm -f
MKDIR=mkdir -p
INTERMEDIATE_DIR_MK=$(INTERMEDIATE_DIR)
DESTINATION_DIR_MK=$(DESTINATION_DIR)

VPATH= $(INTERMEDIATE_DIR):src:vdi:vdi/linux:vpuapi:vpuapi/coda9:vpuapi/wave:theoraparser:theoraparser/src:sample/helper:

SOURCES= main.c vpurun.c mixer.c vpuhelper.c vpuio.c rtk_test.c
#SOURCES += mixer.c mm.c vdi.c vdi_osal.c vpuapi.c vpuapifunc.c vpuhelper.c vpuio.c coda9.c wave4.c product.c

OBJECTNAMES=$(patsubst %.c,%.o,$(patsubst %.cpp,%.o,$(SOURCES)))
OBJECTPATHS=$(addprefix $(INTERMEDIATE_DIR)/,$(OBJECTNAMES))


ifeq ($(WITH_FFMPEG),true)
THERO_RESULT=libtheoraparser.a
THERO_SOURCES = bitpack.c decode.c info.c internal.c state.c theora_parser.c
THERO_OBJECTNAMES=$(patsubst %.c,%.o,$(patsubst %.cpp,%.o,$(THERO_SOURCES)))
THERO_OBJECTPATHS=$(addprefix $(INTERMEDIATE_DIR)/,$(THERO_OBJECTNAMES))
endif



VPUAPI_RESULT=libvpu.so
VPUAPI_SOURCES = mm.c vdi.c vdi_osal.c vpuapi.c vpuapifunc.c coda9.c wave5.c product.c
VPUAPI_SOURCES += vpuhelper.c
VPUAPI_SOURCES += ../aes/aes.c

ifeq ($(ENABLE_TEE_DRM_FLOW),true)
CFLAGS += -DENABLE_TEE_DRM_FLOW
CFLAGS += -I$(PLATFORM_LIB_SRC_PATH)/device/realtek/proprietary/libs/Include/TEEapi
LIBS += -L$(GENERIC_LINUX_PATH)/lib -lTEEapi
endif

VPUAPI_OBJECTNAMES=$(patsubst %.c,%.o,$(patsubst %.cpp,%.o,$(VPUAPI_SOURCES)))
VPUAPI_OBJECTPATHS=$(addprefix $(INTERMEDIATE_DIR)/,$(VPUAPI_OBJECTNAMES))

LOCAL_SHARED_LIBRARIES = \
	-Wl,--whole-archive \
	$(GENERIC_LINUX_PATH)/lib/libRTK_lib.a \
	-Wl,--no-whole-archive

VE1_CHECKSUM = false
ifeq ($(VE1_CHECKSUM),true)
LOCAL_SHARED_LIBRARIES += $(GENERIC_LINUX_PATH)/lib/libMCPControl.a
LOCAL_C_INCLUDES += $(TOP)/device/realtek/proprietary/libs/libMCPControl/inc/
LOCAL_CFLAGS += -DVE1_CHECKSUM
endif

ifeq ($(WITH_FFMPEG),true)
all: $(DESTINATION_DIR)/$(VPUAPI_RESULT) $(DESTINATION_DIR)/$(THERO_RESULT) $(DESTINATION_DIR)/$(RESULT)
else
all: $(DESTINATION_DIR)/$(VPUAPI_RESULT)
endif
	@echo "build OK!!!"

# ./vpurun
$(DESTINATION_DIR)/$(RESULT): $(OBJECTNAMES) $(VPUAPI_OBJECTNAMES)
#$(DESTINATION_DIR)/$(RESULT): $(OBJECTNAMES) $(DESTINATION_DIR)/$(VPUAPI_RESULT)
	@echo ""
	@echo "build $(DESTINATION_DIR)/$(RESULT)"
	@echo ""
	$(CC) $(CFLAGS) $(SYSROOTFLAGS) $(OBJECTPATHS) $(VPUAPI_OBJECTPATHS) -o $@ $(LDFLAGS)
#	$(CC) $(CFLAGS) $(SYSROOTFLAGS) $(OBJECTPATHS) -o $@ $(LDFLAGS)

ifeq ($(WITH_FFMPEG),true)
# ./libtheoraparser.a
$(DESTINATION_DIR)/$(THERO_RESULT): $(THERO_OBJECTNAMES)
	@echo ""
	@echo "build $(DESTINATION_DIR)/$(THERO_RESULT)"
	@echo ""
	$(AR) $(ARFLAGS) $@ $(THERO_OBJECTPATHS)
endif

# ./libvpu.so
$(DESTINATION_DIR)/$(VPUAPI_RESULT): $(VPUAPI_OBJECTNAMES)
	@echo ""
	@echo "build $(DESTINATION_DIR)/$(VPUAPI_RESULT)"
	@echo ""
	$(CC) -shared $(LOCAL_SHARED_LIBRARIES) $(LIBS) -s -o $@ $(VPUAPI_OBJECTPATHS) $(LIBS)
	


clean:
	$(RM) $(DESTINATION_DIR)/$(RESULT)
	$(RM) $(OBJECTPATHS)
#	$(RM) $(DESTINATION_DIR)/$(THERO_RESULT)
	$(RM) $(THERO_OBJECTPATHS)
	$(RM) $(DESTINATION_DIR)/$(VPUAPI_RESULT)
	$(RM) $(VPUAPI_OBJECTPATHS)

$(OBJECTNAMES): %.o: %.c
ifeq ("$(wildcard $(INTERMEDIATE_DIR) )","")
	-$(MKDIR) $(INTERMEDIATE_DIR_MK)
endif
	$(CC) $(CFLAGS) -c -o $(INTERMEDIATE_DIR)/$@ $<

$(THERO_OBJECTNAMES): %.o: %.c
ifeq ("$(wildcard $(INTERMEDIATE_DIR) )","")
	-$(MKDIR) $(INTERMEDIATE_DIR_MK)
endif
	$(CC) $(CFLAGS) -c -o $(INTERMEDIATE_DIR)/$@ $<

$(VPUAPI_OBJECTNAMES): %.o: %.c
ifeq ("$(wildcard $(INTERMEDIATE_DIR) )","")
	-$(MKDIR) $(INTERMEDIATE_DIR_MK)
endif
	$(CC) $(CFLAGS) -fPIC -c -o $(INTERMEDIATE_DIR)/$@ $<
