/*
 * HDCP_ERROR.h
 *
 *  Created on: 2014/8/1
 *      Author: bruce_huang
 */

#ifndef HDCP_ERROR_H_
#define HDCP_ERROR_H_

typedef enum{
	HDCP_TRUE=1,
	HDCP_FALSE=2
}HDCP_RST;

#define	ENUM(x)		x
#define	STR(x)		#x

typedef enum{
	ENUM(HDCP_ERR_NEGO_COMPLETE),
	ENUM(HDCP_ERR_NEGO_COMPLETE_WITH_REPEATER),
	ENUM(HDCP_ERR_SUCCESS),
	ENUM(HDCP_ERR_UNDEFINED),
	ENUM(HDCP_ERR_NO_IO_FUN),
	ENUM(HDCP_ERR_IO_BROKEN),
	ENUM(HDCP_ERR_WRITE_FAILED),
	ENUM(HDCP_ERR_TIMEOUT),
	ENUM(HDCP_ERR_STATE_ERROR),
	ENUM(HDCP_ERR_PAYLOAD_SIZE_ERROR),
	ENUM(HDCP_ERR_H_COMPARE_ERROR),
	ENUM(HDCP_ERR_REAUTH_WITHOUT_TX_PRECOMPUTATION),			// check rx version and tx precomputation.
	ENUM(HDCP_ERR_RESEND_LC_INIT),
	ENUM(HDCP_ERR_LC_INIT_RETRY_COUNT_OVERFLOW),				// retry count overflowed
	ENUM(HDCP_ERR_L_COMPARE_ERROR),
	ENUM(HDCP_ERR_IS_FACSIMILE_KEY),							// check if Rx public key a test key
	ENUM(HDCP_ERR_LLC_SIGNATURE_ERROR),						// verify public cert using llc signature
	ENUM(HDCP_ERR_MSG_ID_ERROR),								// message id error
	ENUM(HDCP_ERR_READ_RXSTATUS_ERROR),
	ENUM(HDCP_ERR_READ_RECEIVERID_LIST_ERROR_NEED_REAUTH),
	ENUM(HDCP_ERR_RECEIVERID_LIST_MSG_SIZE_ERROR_NEED_REAUTH),
	ENUM(HDCP_ERR_V_COMPARE_ERROR_NEED_REAUTH),
	ENUM(HDCP_ERR_SEQ_NUM_V_ROLL_OVER_ERROR_NEED_REAUTH),
	ENUM(HDCP_ERR_DOWNSTREAM_EXCEED_ERROR_NEED_REAUTH),
	ENUM(HDCP_ERR_REPEATER_SEND_RECEIVERID_LIST_TIMEOUT_NEED_REAUTH),
	ENUM(HDCP_ERR_READ_CERT_TIMEOUT_NEED_REAUTH),
	ENUM(HDCP_ERR_READ_H_PRIME_TIMEOUT_NEED_REAUTH),
	ENUM(HDCP_ERR_READ_PAIRING_INFO_TIMEOUT_NEED_REAUTH),
	ENUM(HDCP_ERR_INCORRECT_SEQ_NUM_V_NEED_REAUTH),
	ENUM(HDCP_ERR_M_COMPARE_ERROR),
	ENUM(HDCP_ERR_READ_STREAM_READY_TIMEOUT_NEED_REAUTH),
} HDCP_ERR;

static const char *hdcp_err_str[]={
	STR(HDCP_ERR_NEGO_COMPLETE),					// nego complete, normal case.
	STR(HDCP_ERR_NEGO_COMPLETE_WITH_REPEATER),		// nego complete, with repeater.
	STR(HDCP_ERR_SUCCESS),
	STR(HDCP_ERR_UNDEFINED),
	STR(HDCP_ERR_NO_IO_FUN),
	STR(HDCP_ERR_IO_BROKEN),
	STR(HDCP_ERR_WRITE_FAILED),
	STR(HDCP_ERR_TIMEOUT),
	STR(HDCP_ERR_STATE_ERROR),
	STR(HDCP_ERR_PAYLOAD_SIZE_ERROR),
	STR(HDCP_ERR_H_COMPARE_ERROR),
	STR(HDCP_ERR_REAUTH_WITHOUT_TX_PRECOMPUTATION),			// check rx version and tx precomputation.
	STR(HDCP_ERR_RESEND_LC_INIT),
	STR(HDCP_ERR_LC_INIT_RETRY_COUNT_OVERFLOW),				// retry count overflowed
	STR(HDCP_ERR_L_COMPARE_ERROR),
	STR(HDCP_ERR_IS_FACSIMILE_KEY),							// check if Rx public key a test key
	STR(HDCP_ERR_LLC_SIGNATURE_ERROR),						// verify public cert using llc signature
	STR(HDCP_ERR_MSG_ID_ERROR),								// message id error
	STR(HDCP_ERR_READ_RXSTATUS_ERROR),
	STR(HDCP_ERR_READ_RECEIVERID_LIST_ERROR_NEED_REAUTH),
	STR(HDCP_ERR_RECEIVERID_LIST_MSG_SIZE_ERROR_NEED_REAUTH),
	STR(HDCP_ERR_V_COMPARE_ERROR_NEED_REAUTH),
	STR(HDCP_ERR_SEQ_NUM_V_ROLL_OVER_ERROR_NEED_REAUTH),
	STR(HDCP_ERR_DOWNSTREAM_EXCEED_ERROR_NEED_REAUTH),
	STR(HDCP_ERR_REPEATER_SEND_RECEIVERID_LIST_TIMEOUT_NEED_REAUTH),
	STR(HDCP_ERR_READ_CERT_TIMEOUT_NEED_REAUTH),
	STR(HDCP_ERR_READ_H_PRIME_TIMEOUT_NEED_REAUTH),
	STR(HDCP_ERR_READ_PAIRING_INFO_TIMEOUT_NEED_REAUTH),
	STR(HDCP_ERR_INCORRECT_SEQ_NUM_V_NEED_REAUTH),
	STR(HDCP_ERR_M_COMPARE_ERROR),
	STR(HDCP_ERR_READ_STREAM_READY_TIMEOUT_NEED_REAUTH),
};

#endif /* HDCP_ERROR_H_ */
